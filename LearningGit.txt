Git笔记

1. 输入git可以检查系统上是否已经安装了Git。

2. git config --global user.name "Your Name"
    git config --global user.email "email@example.com"
    设置全局的作者姓名和email地址。

3. 在工作目录下输入git init命令就可以在此目录下创建Git配置库。

4. git add LearningGit.docx将文件添加到版本库。
    git commit将添加到版本库中的文件提交到版本库中。
    git commit -m "comment"为这次提交附上注释。

5. git status命令查看配置库当前状态。

6. git diff LearningGit.docx查看文件有哪些变更。

7. 提交修改过的文件也使用git add和git commit两条命令。

8. git log命令可以查看提交历史。
    git log --pretty=oneline可以查看提交历史的摘要。

9. 在Git中，HEAD表示当前版本。HEAD^表示上一个版本。HEAD^^表示上上个版本。HEAD~N表示上N个版本。

10. 使用命令git reset --hard HEAD^将文件回退到上一个版本。

11. 使用命令git reset --hard commit_id将文件恢复到指定的版本。

12. git reflog命令可以查看命令历史。以查找某个版本号。

13. 在Git中，我们操作文件的目录称作工作区。工作区中有一个隐藏目录.git。这是Git的版本库。

14. Git版本库中保存了很多东西。其中最重要的就是称作stage或index的暂存区。除此之外，版本库中还有Git自动创建的称作master的第一个分支，以及指向master分支的指针HEAD。前面我们用git add命令添加文件实际上是把文件添加到暂存区；git commit命令把暂存区的内容提交到当前分支。

15. 每次修改，如果不add到暂存区，commit的时候就不会提交到版本库分支。

16. git diff HEAD -- LearningGit.docx命令可以查看工作区和版本库里最新版本的区别。

17. git checkout -- LearningGit.docx命令撤销文件在工作区的修改，将文件恢复到版本库或缓冲区的状态。注意--操作符，如果没有它，表示切换到另一个分支。

18. git reset HEAD LearningGit.docx命令将暂存区的修改撤销（unstage）掉，并回退到指定版本，重新放回工作区。HEAD表示最新版本。reset后，暂存区是干净的，所有修改都在工作区。

19. git rm LearningGit.docx命令将文件删除并在缓冲区记录，待commit提交时从版本库删除。

20. 在GitHub上托管自己的Git仓库前检查用户主目录下是否有.ssh目录和目录下的id_rsa和id_rsa.pub两个文件。如果没有，使用ssh-keygen -t rss -C "email@example.com"命令生成公匙和私匙。登陆GitHub，在Account settings->SSH Keys里贴上id_rsa.pub文件的内容。接下来在GitHub上创建一个空的新仓库。

21. 在本地仓库下执行命令git remote add origin git@github.com:hideori/learninggit.git将本地仓库和远程仓库关联起来。添加后，远程仓库的名字就是origin。

22. 接下来，命令git push -u origin master将本地仓库当前分支master的内容推送到远程。第一次推送master分支时，加上-u参数，Git不但会把本地的master分支内容推送到远程的master分支，还会把本地的master分支和远程的master分支关联起来。在以后推送或拉取时就可以简化命令，直接使用git push origin master把本地master分支的最新修改推送至GitHub。

23. 第一次使用Git的clone或push连接GitHub时会有授权告警，只需输入yes即可。

24. 命令git clone git@github.com:hideori/learninggit.git将远程库克隆到本地。

25. 除了git协议，还可以使用https协议（https://github.com/hideori/learninggit.git）连接远程库。

26. git checkout -b branch_20160115命令创建并切换到分支branch_20160115。
    相当于两条命令：
    git branch branch_20160115
    git checkout branch_20160115

27. git branch命令查看所有分支。当前分支前面会有一个*号。

28. git merge branch_20160115命令将branch_20160115分支的工作成果合并到master分支上。结果信息里的Fast-forward表示快速合并模式，即直接把master指向branch_20160115分支的当前提交，所以速度快。并不是每次合并都能够Fast-forward，其它方式后面介绍。

29. git branch -d branch_20160115命令删除branch_20160115分支。
    git branch -D branch_20160115命令强行删除branch_20160115分支。用来丢弃一个没有被合并过的分支。

30. 当在分支和主线上都做了修改后，git merge branch_20160116会报冲突，无法自动合并。这时候必须手工解决冲突，提交才能完成合并。

31. git log --graph --pretty=oneline --abbrev-commit可以查看分支情况。

32. 为了更清楚地查看分支情况，通常会强制禁止Fast forward模式的merge。
    git merge --no-ff -m "merge with branch_20160117" branch_20160117

33. 常用分支策略：保持master分支稳定，仅用来发布新版本，不用与平时修改代码。新建develop分支完成工作，在版本发布时合并到master分支上。每个人都从develop分支创建自己的分支用于平时编码，随时合并到develop分支上。

34. git stash命令用来保存工作现场。
    当你需要切换到一个分支上修改代码，当前分支的代码有不能提交的时候，可以先将当前的工作现场保存起来。切换到其它分支完成工作后，再切换回来，回复现场继续工作。

35. git stash apply命令恢复保存的现场，但保留保存的内容，git stash drop命令删除保存的现场。

36. git stash pop命令恢复现场的同时将保存的内容也删除。

37. git stash list命令查看保存现场的记录。

38. 可以多次地stash保存现场，然后执行命令git stash apply stash@{0}恢复指定的现场。

39. 从远程仓库克隆时，Git自动把本地的master分支和远程的master分支对应起来。远程仓库的默认名称是origin。
    git remote命令可以查看远程仓库信息。
    git remote -v命令可以查看更详细的远程仓库信息，包括可以fetch和push的origin地址。

40. git push origin branch_20160119命令将branch_20160119分支推送到远程仓库。

41. git checkout -b branch_20160119 origin/branch_20160119命令将远程branch_20160119创建到本地并切换到该分支。

42. git branch --set-upstream branch_20160119 origin/branch_20160119命令将本地分支和远程分支建立关联（建立tracking information）。

43. 如果push失败，需要先将远程分支pull到本地。执行git pull命令。如果文件有冲突，需要手工解决冲突。

44. 标签是版本库的快照，可以标记一个历史版本。切换到想要打标签的分支使用命令git tag tag_20160119即可。

45. git tag tag_name commit_id命令可以在指定的提交上打标签。

46. git show tag_name命令可以查看标签信息。

47. git tag命令可以查看标签列表。

48. git tag -a tag_name -m "commit..." commit_id命令可以打带说明的标签。－a指定标签名，－m指定说明内容。

49. git tag -d tag_name命令可以删除一个标签。

50. git push origin tag_name命令将标签推送到远程仓库。
    git push origin --tags命令将所有标签推送到远程仓库。
    git push origin :refs/tags/tag_name命令删除远程仓库的标签。
    git push origin :refs/heads/branch_name命令删除远程仓库的分支。
